// Code generated by entc, DO NOT EDIT.

package ent

import (
	"mygo/ent/auth"
	"mygo/ent/schema"
	"mygo/ent/todo"
	"mygo/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	authFields := schema.Auth{}.Fields()
	_ = authFields
	// authDescEmail is the schema descriptor for email field.
	authDescEmail := authFields[0].Descriptor()
	// auth.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	auth.EmailValidator = authDescEmail.Validators[0].(func(string) error)
	// authDescPassword is the schema descriptor for password field.
	authDescPassword := authFields[1].Descriptor()
	// auth.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	auth.PasswordValidator = authDescPassword.Validators[0].(func(string) error)
	todoFields := schema.Todo{}.Fields()
	_ = todoFields
	// todoDescTitle is the schema descriptor for title field.
	todoDescTitle := todoFields[0].Descriptor()
	// todo.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	todo.TitleValidator = todoDescTitle.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
}
